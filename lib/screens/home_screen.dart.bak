import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import '../providers/debt_provider.dart';
import '../widgets/debt_visualization.dart';
import '../widgets/debt_profile_list.dart';
import '../widgets/debt_input_form.dart';

// Custom clipper for wave shape
class WaveClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    var path = Path();
    path.lineTo(0, size.height * 0.8);
    
    var firstControlPoint = Offset(size.width * 0.25, size.height);
    var firstEndPoint = Offset(size.width * 0.5, size.height * 0.8);
    path.quadraticBezierTo(firstControlPoint.dx, firstControlPoint.dy,
        firstEndPoint.dx, firstEndPoint.dy);

    var secondControlPoint = Offset(size.width * 0.75, size.height * 0.6);
    var secondEndPoint = Offset(size.width, size.height * 0.8);
    path.quadraticBezierTo(secondControlPoint.dx, secondControlPoint.dy,
        secondEndPoint.dx, secondEndPoint.dy);

    path.lineTo(size.width, 0);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) => false;
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  
  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    );
    _controller.forward();
  }
  
  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    final isSmallScreen = MediaQuery.of(context).size.width < 800;
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    
    // Modern gradient colors
    final primaryGradient = LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: isDarkMode 
          ? [const Color(0xFF1A237E), const Color(0xFF3949AB)]
          : [const Color(0xFF6A1B9A), const Color(0xFF9C27B0)],
    );
    
    final secondaryGradient = LinearGradient(
      begin: Alignment.topRight,
      end: Alignment.bottomLeft,
      colors: isDarkMode 
          ? [const Color(0xFF311B92), const Color(0xFF512DA8)]
          : [const Color(0xFF00796B), const Color(0xFF009688)],
    );
    
    // Create a modern, unique design
    return Scaffold(
      key: _scaffoldKey,
      backgroundColor: isDarkMode ? const Color(0xFF121212) : Colors.white,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: isSmallScreen 
            ? IconButton(
                icon: Icon(
                  Icons.menu,
                  color: isDarkMode ? Colors.white : Colors.white,
                ),
                onPressed: () => _scaffoldKey.currentState!.openDrawer(),
              )
            : null,
        title: FadeTransition(
          opacity: _animation,
          child: Text(
            'DEBT FREEDOM',
            style: TextStyle(
              fontFamily: 'Montserrat',
              color: isDarkMode ? Colors.white : Colors.white,
              fontWeight: FontWeight.w700,
              fontSize: 22,
              letterSpacing: 1.5,
            ),
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(
              Icons.add_circle_outline_rounded,
              color: isDarkMode ? Colors.white : Colors.white,
              size: 28,
            ),
            tooltip: 'Create New Profile',
            onPressed: () => _showAddDebtProfile(context),
          ),
        ],
        flexibleSpace: ClipPath(
          clipper: WaveClipper(),
          child: Container(
            decoration: BoxDecoration(gradient: primaryGradient),
          ),
        ),
      ),
      drawer: isSmallScreen ? _buildDrawer(context) : null,
      body: Consumer<DebtProvider>(
        builder: (context, provider, _) {
          // Define reusable design elements and colors
          final accentColor = Theme.of(context).colorScheme.primary;
          final cardColor = isDarkMode ? const Color(0xFF2C2C2E) : Colors.white;
          
          final cardGradient = LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: isDarkMode 
                ? [const Color(0xFF303F9F), const Color(0xFF1A237E)]
                : [const Color(0xFF6A1B9A), const Color(0xFF4A148C)],
          );
          
          final secondaryCardGradient = LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: isDarkMode 
                ? [const Color(0xFF0D47A1), const Color(0xFF1565C0)]
                : [const Color(0xFF00796B), const Color(0xFF00695C)],
          );
          if (provider.profiles.isEmpty) {
            // Empty state with dramatic, engaging design
            return Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: isDarkMode
                      ? [const Color(0xFF121212), const Color(0xFF1E1E1E)]
                      : [Colors.white, const Color(0xFFF5F5F5)],
                ),
              ),
              child: Center(
                child: FadeTransition(
                  opacity: _animation,
                  child: SlideTransition(
                    position: Tween<Offset>(
                      begin: const Offset(0, 0.1),
                      end: Offset.zero,
                    ).animate(_animation),
                    child: Container(
                      margin: const EdgeInsets.all(24),
                      padding: const EdgeInsets.all(32),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                          colors: [  
                            const Color(0xFF6A1B9A),
                            const Color(0xFF9C27B0),
                          ],
                        ),
                        borderRadius: BorderRadius.circular(24),
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFF9C27B0).withOpacity(0.3),
                            blurRadius: 20,
                            spreadRadius: 5,
                            offset: const Offset(0, 10),
                          ),
                        ],
                      ),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          // Custom illustration
                          Container(
                            width: 120,
                            height: 120,
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.2),
                              shape: BoxShape.circle,
                            ),
                            child: const Icon(
                              Icons.money_off_rounded,
                              size: 60,
                              color: Colors.white,
                            ),
                          ),
                          const SizedBox(height: 32),
                          Text(
                            'START YOUR DEBT-FREE JOURNEY',
                            style: const TextStyle(
                              fontFamily: 'Montserrat',
                              fontSize: 24,
                              fontWeight: FontWeight.w800,
                              color: Colors.white,
                              letterSpacing: 1.0,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                          Text(
                            'Track, visualize, and conquer your debts with powerful tools and insights',
                            style: TextStyle(
                              fontSize: 16,
                              color: Colors.white.withOpacity(0.8),
                              height: 1.5,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 40),
                          ElevatedButton(
                            onPressed: () => _showAddDebtProfile(context),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.white,
                              foregroundColor: const Color(0xFF9C27B0),
                              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(30),
                              ),
                              elevation: 8,
                              shadowColor: Colors.black38,
                            ),
                            child: const Text(
                              'CREATE PROFILE',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                letterSpacing: 1.5,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          }

          // Use a responsive layout based on screen size
          if (isSmallScreen) {
            // Mobile view - iOS-like tab design
            return Column(
              children: [
                // Profile selector inspired by iOS segmented control
                Container(
                  height: 60,
                  margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  decoration: BoxDecoration(
                    color: isDarkMode ? const Color(0xFF2C2C2E) : const Color(0xFFE5E5EA),
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: ListView.separated(
                    scrollDirection: Axis.horizontal,
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
                    itemCount: provider.profiles.length,
                    separatorBuilder: (context, index) => const SizedBox(width: 8),
                    itemBuilder: (context, index) {
                      final profile = provider.profiles[index];
                      final isSelected = profile.id == provider.selectedProfile?.id;
                      
                      return GestureDetector(
                        onTap: () => provider.selectProfile(profile),
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          decoration: BoxDecoration(
                            color: isSelected 
                                ? (isDarkMode ? Colors.black : Colors.white) 
                                : Colors.transparent,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          alignment: Alignment.center,
                          child: Text(
                            profile.name,
                            style: TextStyle(
                              color: isSelected 
                                  ? (isDarkMode ? Colors.white : Colors.black) 
                                  : (isDarkMode ? Colors.white70 : Colors.black54),
                              fontWeight: isSelected ? FontWeight.w600 : FontWeight.w400,
                              fontSize: 15,
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
                // Main content area with iOS-style rounded card
                Expanded(
                  child: provider.selectedProfile == null
                      ? Center(
                          child: Text(
                            'Select a profile to view details',
                            style: TextStyle(
                              fontSize: 16,
                              color: isDarkMode ? Colors.white70 : Colors.black54,
                            ),
                          ),
                        )
                      : Container(
                          margin: const EdgeInsets.all(16),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(16),
                            child: Container(
                              color: cardColor,
                              child: SingleChildScrollView(
                                physics: BouncingScrollPhysics(), // iOS-like scroll
                                child: DebtVisualization(
                                  profile: provider.selectedProfile!,
                                  isDarkMode: isDarkMode,
                                ),
                              ),
                            ),
                          ),
                        ),
                ),
              ],
            );
          } else {
            // Desktop layout with macOS-inspired sidebar
            return Row(
              children: [
                // Sidebar with macOS style
                Container(
                  width: 250,
                  color: isDarkMode ? const Color(0xFF2C2C2E) : const Color(0xFFF2F2F7),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      // Sidebar header
                      Container(
                        padding: const EdgeInsets.all(16),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              'Your Profiles',
                              style: TextStyle(
                                fontSize: 15,
                                fontWeight: FontWeight.w600,
                                color: isDarkMode ? Colors.white70 : Colors.black54,
                                letterSpacing: -0.3,
                              ),
                            ),
                            IconButton(
                              icon: Icon(CupertinoIcons.plus_circle, size: 20, color: accentColor),
                              onPressed: () => _showAddDebtProfile(context),
                              tooltip: 'New Profile',
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(),
                            ),
                          ],
                        ),
                      ),
                      // Profile list
                      Expanded(
                        child: ListView.builder(
                          padding: const EdgeInsets.symmetric(horizontal: 8),
                          itemCount: provider.profiles.length,
                          itemBuilder: (context, index) {
                            final profile = provider.profiles[index];
                            final isSelected = profile.id == provider.selectedProfile?.id;
                            
                            return Container(
                              margin: const EdgeInsets.symmetric(vertical: 2, horizontal: 8),
                              decoration: BoxDecoration(
                                color: isSelected ? accentColor : Colors.transparent,
                                borderRadius: BorderRadius.circular(6),
                              ),
                              child: ListTile(
                                contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                                title: Text(
                                  profile.name,
                                  style: TextStyle(
                                    color: isSelected 
                                        ? Colors.white 
                                        : (isDarkMode ? Colors.white : Colors.black87),
                                    fontSize: 14,
                                    fontWeight: isSelected ? FontWeight.w500 : FontWeight.w400,
                                  ),
                                ),
                                subtitle: profile.description.isNotEmpty ? Text(
                                  profile.description,
                                  style: TextStyle(
                                    color: isSelected 
                                        ? Colors.white70 
                                        : (isDarkMode ? Colors.white54 : Colors.black54),
                                    fontSize: 12,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ) : null,
                                leading: Container(
                                  width: 32,
                                  height: 32,
                                  decoration: BoxDecoration(
                                    color: isSelected 
                                        ? Colors.white.withOpacity(0.2) 
                                        : accentColor.withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(6),
                                  ),
                                  child: Icon(
                                    CupertinoIcons.chart_bar,
                                    size: 18,
                                    color: isSelected ? Colors.white : accentColor,
                                  ),
                                ),
                                selected: isSelected,
                                onTap: () => provider.selectProfile(profile),
                                trailing: IconButton(
                                  icon: Icon(
                                    CupertinoIcons.trash,
                                    size: 16,
                                    color: isSelected ? Colors.white70 : Colors.grey,
                                  ),
                                  onPressed: () => provider.deleteProfile(profile.id),
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),
                // Content area with macOS-style rounded window
                Expanded(
                  child: provider.selectedProfile == null
                      ? Center(
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                CupertinoIcons.arrow_left,
                                size: 32,
                                color: isDarkMode ? Colors.white30 : Colors.black26,
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'Select a profile from the sidebar',
                                style: TextStyle(
                                  fontSize: 18,
                                  color: isDarkMode ? Colors.white54 : Colors.black45,
                                  letterSpacing: -0.5,
                                ),
                              ),
                            ],
                          ),
                        )
                      : Container(
                          margin: const EdgeInsets.all(24),
                          decoration: BoxDecoration(
                            color: cardColor,
                            borderRadius: BorderRadius.circular(12),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.05),
                                blurRadius: 10,
                                offset: const Offset(0, 2),
                              ),
                            ],
                          ),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(12),
                            child: SingleChildScrollView(
                              physics: BouncingScrollPhysics(),
                              child: DebtVisualization(
                                profile: provider.selectedProfile!,
                                isDarkMode: isDarkMode,
                              ),
                            ),
                          ),
                        ),
                ),
              ],
            );
          } else {
            // Main content with profile selector and debt visualization
            return Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: isDarkMode
                    ? [const Color(0xFF121212), const Color(0xFF1E1E1E)]
                    : [Colors.white, const Color(0xFFF5F5F5)],
              ),
            ),
            child: Row(
              children: [
                if (!isSmallScreen) 
                  // Side navigation for desktop view with stylish design
                  Container(
                    width: 280,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: isDarkMode
                            ? [const Color(0xFF1A237E), const Color(0xFF121212)]
                            : [const Color(0xFF6A1B9A), const Color(0xFF4A148C)],
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 15,
                          offset: const Offset(5, 0),
                        ),
                      ],
                    ),
                    child: _buildProfileSelector(context, provider, isDarkMode),
                  ),
                
                // Main content area - expanded to take remaining space
                Expanded(
                  child: provider.selectedProfile == null
                    ? _buildNoProfileSelectedView(isDarkMode)
                    : Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: DebtVisualization(
                          profile: provider.selectedProfile!,
                          isDarkMode: isDarkMode,
                        ),
                      ),
                ),
              ],
            ),
          );
        },
      ),
      
      // Modern FAB design
      floatingActionButton: !Provider.of<DebtProvider>(context).profiles.isEmpty
          ? FloatingActionButton(
              onPressed: () => _showAddDebtProfile(context),
              backgroundColor: const Color(0xFF9C27B0),
              foregroundColor: Colors.white,
              elevation: 8,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
              child: const Icon(Icons.add),
            )
          : null,

    );
  }
  
  // Build the drawer with a stylish design
  Widget _buildDrawer(BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final provider = Provider.of<DebtProvider>(context);
    
    return Drawer(
      backgroundColor: Colors.transparent,
      elevation: 0,
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: isDarkMode
                ? [const Color(0xFF1A237E), const Color(0xFF121212)]
                : [const Color(0xFF6A1B9A), const Color(0xFF4A148C)],
          ),
        ),
      ),
      child: Drawer(
        backgroundColor: Colors.transparent,
        elevation: 0,
        child: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [Color(0xFF4A148C), Color(0xFF7B1FA2)],
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 16.0),
          child: Row(
            children: [
              Text(
                'PROFILES',
                style: TextStyle(
                  fontFamily: 'Montserrat',
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.w700,
                  letterSpacing: 1.5,
                ),
              ),
              const Spacer(),
              IconButton(
                icon: const Icon(
                  Icons.add_circle_outline,
                  color: Colors.white,
                ),
                onPressed: () => _showAddDebtProfile(context),
              ),
            ],
          ),
        ),
        const Divider(color: Colors.white24),
        // Profile list
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.symmetric(vertical: 8.0),
            itemCount: provider.profiles.length,
            itemBuilder: (context, index) {
              final profile = provider.profiles[index];
              final isSelected = profile.id == provider.selectedProfile?.id;
              
              return AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                margin: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(12),
                  gradient: isSelected 
                      ? LinearGradient(
                          colors: [
                            Colors.white.withOpacity(0.1),
                            Colors.white.withOpacity(0.2),
                          ],
                        )
                      : null,
                  boxShadow: isSelected ? [
                    BoxShadow(
                      color: Colors.black12,
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ] : null,
                ),
                child: Material(
                  color: Colors.transparent,
                  child: InkWell(
                    borderRadius: BorderRadius.circular(12),
                    onTap: () => provider.selectProfile(profile),
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Row(
                        children: [
                          Container(
                            width: 12,
                            height: 12,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: isSelected ? Colors.white : Colors.white54,
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: Text(
                              profile.name,
                              style: TextStyle(
                                color: isSelected ? Colors.white : Colors.white70,
                                fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                                fontSize: 16,
                              ),
                            ),
                          ),
                          IconButton(
                            icon: const Icon(
                              Icons.delete_outline,
                              color: Colors.white54,
                              size: 20,
                            ),
                            onPressed: () => _showDeleteConfirmation(context, provider, profile.id),
                            splashRadius: 20,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              );
            },
          ),
        ),
        // Status bar
        Container(
          padding: const EdgeInsets.all(20),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                width: 10,
                height: 10,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.greenAccent,
                ),
              ),
              const SizedBox(width: 8),
              Text(
                'CONNECTED',
                style: TextStyle(
                  color: Colors.white70,
                  fontSize: 12,
                  letterSpacing: 1.2,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
  
  // Build the empty state when no profile is selected
  Widget _buildNoProfileSelectedView(bool isDarkMode) {
    return Center(
      child: Container(
        width: 500,
        padding: const EdgeInsets.all(32),
        decoration: BoxDecoration(
          color: isDarkMode ? Colors.black12 : Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 15,
              spreadRadius: 5,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 100,
              height: 100,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    const Color(0xFF7986CB),
                    const Color(0xFF3F51B5),
                  ],
                ),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.touch_app_rounded,
                size: 50,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 24),
            Text(
              'Select a Debt Profile',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: isDarkMode ? Colors.white : Colors.black87,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Choose a profile from the sidebar to view detailed statistics and visualizations',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 16,
                color: isDarkMode ? Colors.white70 : Colors.black54,
                height: 1.5,
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Show delete confirmation dialog
  void _showDeleteConfirmation(BuildContext context, DebtProvider provider, String profileId) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: isDarkMode ? const Color(0xFF1E1E1E) : Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: Text(
          'Delete Profile',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: isDarkMode ? Colors.white : Colors.black,
          ),
        ),
        content: Text(
          'Are you sure you want to delete this profile? This action cannot be undone.',
          style: TextStyle(
            color: isDarkMode ? Colors.white70 : Colors.black87,
          ),
        ),
        actions: [
          TextButton(
            child: Text(
              'CANCEL',
              style: TextStyle(
                color: isDarkMode ? Colors.white70 : Colors.black54,
                fontWeight: FontWeight.w500,
              ),
            ),
            onPressed: () => Navigator.of(context).pop(),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.redAccent,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
            ),
            child: const Text(
              'DELETE',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.w500,
              ),
            ),
            onPressed: () {
              provider.deleteProfile(profileId);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }

  void _showAddDebtProfile(BuildContext context) {
    final isSmallScreen = MediaQuery.of(context).size.width < 800;
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final backgroundColor = isDarkMode ? const Color(0xFF1E1E1E) : Colors.white;
    
    if (isSmallScreen) {
      // Modern styled modal sheet
      showModalBottomSheet(
        context: context,
        isScrollControlled: true,
        useSafeArea: true,
        backgroundColor: Colors.transparent,
        barrierColor: Colors.black.withOpacity(0.5),
        builder: (context) => FractionallySizedBox(
          heightFactor: 0.9,
          child: Container(
            decoration: BoxDecoration(
              color: backgroundColor,
              borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 15,
                  offset: const Offset(0, -5),
                )
              ],
            ),
            child: Padding(
              padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom,
              ),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Handle bar
                    Padding(
                      padding: const EdgeInsets.only(top: 12.0),
                      child: Container(
                        width: 40,
                        height: 5,
                        decoration: BoxDecoration(
                          color: Colors.grey.withOpacity(0.3),
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                    // Header with gradient
                    Container(
                      padding: const EdgeInsets.all(24),
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                          colors: [
                            const Color(0xFF6A1B9A),
                            const Color(0xFF4A148C),
                          ],
                        ),
                        borderRadius: const BorderRadius.only(
                          bottomLeft: Radius.circular(24),
                          bottomRight: Radius.circular(24),
                        ),
                      ),
                      child: Row(
                        children: [
                          // Gradient circle icon
                          Container(
                            width: 48,
                            height: 48,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: Colors.white.withOpacity(0.2),
                            ),
                            child: const Icon(
                              Icons.add_chart,
                              color: Colors.white,
                              size: 24,
                            ),
                          ),
                          const SizedBox(width: 16),
                          const Text(
                            'CREATE DEBT PROFILE',
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              letterSpacing: 1.2,
                            ),
                          ),
                          const Spacer(),
                          IconButton(
                            icon: const Icon(
                              Icons.close,
                              color: Colors.white,
                            ),
                            onPressed: () => Navigator.of(context).pop(),
                          ),
                        ],
                      ),
                    ),
                    // Form content
                    Padding(
                      padding: const EdgeInsets.all(24.0),
                      child: const DebtInputForm(),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      );
    } else {
      // Modern styled modal dialog for desktop
      showDialog(
        context: context,
        builder: (context) => Dialog(
          backgroundColor: Colors.transparent,
          insetPadding: const EdgeInsets.all(32),
          child: Container(
            decoration: BoxDecoration(
              color: backgroundColor,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 30,
                  spreadRadius: 5,
                ),
              ],
            ),
            constraints: const BoxConstraints(maxWidth: 700, maxHeight: 800),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Header with gradient
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(24),
                    decoration: const BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          Color(0xFF6A1B9A),
                          Color(0xFF4A148C),
                        ],
                      ),
                    ),
                    child: Row(
                      children: [
                        const Text(
                          'CREATE NEW DEBT PROFILE',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 1.2,
                          ),
                        ),
                        const Spacer(),
                        Container(
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(30),
                          ),
                          child: IconButton(
                            icon: const Icon(
                              Icons.close,
                              color: Colors.white,
                            ),
                            onPressed: () => Navigator.of(context).pop(),
                          ),
                        ),
                      ],
                    ),
                  ),
                  // Form content in scrollable container
                  Flexible(
                    child: SingleChildScrollView(
                      child: Padding(
                        padding: const EdgeInsets.all(32.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Container(
                              padding: const EdgeInsets.all(16),
                              decoration: BoxDecoration(
                                color: isDarkMode 
                                    ? const Color(0xFF2A2A2A) 
                                    : const Color(0xFFF5F5F5),
                                borderRadius: BorderRadius.circular(12),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.05),
                                    blurRadius: 10,
                                    offset: const Offset(0, 5),
                                  ),
                                ],
                              ),
                              child: const Text(
                                'Fill in the details below to create a new debt profile. This will help you track and visualize your debt payoff journey.',
                                style: TextStyle(height: 1.5),
                              ),
                            ),
                            const SizedBox(height: 24),
                            const DebtInputForm(),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }
  }
}
